name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  BUILD_TYPE: Release
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - generator: "Visual Studio 17 2022"
            preset: "msvc-release"
            config: "Release"
          - generator: "Visual Studio 17 2022"
            preset: "msvc-debug"
            config: "Debug"

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup MSVC
      uses: microsoft/setup-msbuild@v1.3

    - name: Export GitHub Actions cache environment variables
      uses: actions/github-script@v7
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    - name: Cache CMake build directory
      uses: actions/cache@v4
      with:
        path: |
          build
          ~/.cache/vcpkg
        key: ${{ runner.os }}-cmake-${{ matrix.preset }}-${{ hashFiles('**/CMakeLists.txt', 'vcpkg.json') }}
        restore-keys: |
          ${{ runner.os }}-cmake-${{ matrix.preset }}-
          ${{ runner.os }}-cmake-

    - name: Install Ninja
      run: choco install ninja

    - name: Configure CMake
      run: cmake --preset ${{ matrix.preset }}

    - name: Build
      run: cmake --build --preset ${{ matrix.preset }}

    - name: Test
      if: matrix.config == 'Release'
      run: ctest --preset ${{ matrix.preset }} --output-on-failure

    - name: Package
      if: matrix.config == 'Release'
      run: cpack --config build/${{ matrix.preset }}/CPackConfig.cmake

    - name: Upload artifacts
      if: matrix.config == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: windows-package-${{ matrix.preset }}
        path: build/${{ matrix.preset }}/*.exe

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format clang-tidy ninja-build

    - name: Check clang-format
      run: |
        find src apps tests include -name '*.cpp' -o -name '*.hpp' -o -name '*.h' | xargs clang-format --dry-run --Werror

    - name: Configure for clang-tidy
      run: |
        cmake -S . -B build -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -G Ninja

    - name: Run clang-tidy
      run: |
        find src apps tests -name '*.cpp' | xargs clang-tidy -p build --warnings-as-errors='*'

  documentation:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Install Doxygen
      run: sudo apt-get update && sudo apt-get install -y doxygen graphviz

    - name: Generate documentation
      run: |
        cmake -S . -B build
        cmake --build build --target docs

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./build/docs/html

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: cpp

    - name: Configure CMake
      run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug

    - name: Build
      run: cmake --build build

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2